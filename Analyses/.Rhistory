p <- dim(A)[1]
k <- dim(A)[2]
A2 <- A
complete <- A[, -spec.NA]
dim(complete)
complete <- A[-spec.NA,]
incomplete <- A[spec.NA,]
dim(complete)
dim(incomplete)
length(spec.NA)
i=1
missing.coord <- which(is.na(A.2[spec.NA[i], ]))
missing.coord <- which(is.na(A2[spec.NA[i], ]))
missing.coord
A2
dim(A2)
x <- A2[-spec.NA, -missing.coord]
y <- A2[-spec.NA, missing.coord]
dim(x)
dim(y)
XY.vcv <- cov(cbind(x, y))
S12 <- XY.vcv[1:dim(x)[2], (dim(x)[2] + 1):(dim(x)[2] +
dim(y)[2])]
pls <- svd(S12)
U <- pls$u
V <- pls$v
XScores <- x %*% U
YScores <- y %*% V
beta <- coef(lm(YScores ~ XScores))
miss.xsc <- c(1, A2[spec.NA[i], -missing.coord] %*%
U)
miss.ysc <- miss.xsc %*% beta
pred.val <- miss.ysc %*% t(V)
pred.val
for (i in 1:length(spec.NA)) {
missing.coord <- which(is.na(A2[spec.NA[i], ]))
x <- A2[-spec.NA, -missing.coord]
y <- A2[-spec.NA, missing.coord]
XY.vcv <- cov(cbind(x, y))
S12 <- XY.vcv[1:dim(x)[2], (dim(x)[2] + 1):(dim(x)[2] +
dim(y)[2])]
pls <- svd(S12)
U <- pls$u
V <- pls$v
XScores <- x %*% U
YScores <- y %*% V
beta <- coef(lm(YScores ~ XScores))
miss.xsc <- c(1, A2[spec.NA[i], -missing.coord] %*%
U)
miss.ysc <- miss.xsc %*% beta
pred.val <- miss.ysc %*% t(V)
for (j in 1:length(pred.val)) {
A2[spec.NA[i], missing.coord[j]] <- pred.val[j]
}
}
A2
View(A2)
View(A)
devtools::install_github('mlcollyer/RRPP', ref = "develop")
3
install.packages(c("ape", "cli", "rlang", "tibble", "vctrs"))
install.packages(c("ape", "cli", "rlang", "tibble", "vctrs"))
install.packages(c("ape", "cli", "rlang", "tibble", "vctrs"))
devtools::install_github('mlcollyer/RRPP', ref= "develop")
install.packages('rlang')
install.packages("rlang")
devtools::install_github('mlcollyer/RRPP', ref= "develop")
devtools::install_github('mlcollyer/RRPP', ref= "develop")
devtools::install_github('mlcollyer/RRPP', ref= "develop", force = TRUE)
devtools::install_github('mlcollyer/RRPP', ref="develop", force = TRUE, build_vignettes = TRUE)
library(RRPP)
?lm.rrpp
library(geomorph)
?shapeHulls
?plot.gm.prcomp
RRPP:::plot.predict.lm.rrpp
?as.factor
x <- c("a","c","b")
as.factor(x)
as.factor(x, ordered = T)
as.factor(x, as.ordered = T)
factor(x, as.ordered = T)
factor(x, ordered = T)
factor(x)
RRPP:::plot.lm.rrpp
?RRPP:::plot.lm.rrpp
library(geomorph)
?integration.Vrel
integration.Vrel
compare.ZVrel
library(geomorhp)
library(geomorph)
?fixed.angle
library(kableExtra)
install.packages(c("aplot", "blob", "bookdown", "broom", "car", "caret", "cli", "commonmark", "conquer", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "FNN", "future", "geiger", "ggplot2", "ggsci", "googledrive", "googlesheets4", "gstat", "hardhat", "hms", "htmltools", "htmlwidgets", "igraph", "interp", "intervals", "ipred", "lme4", "magick", "markdown", "Matrix", "metafor", "modelr", "multcompView", "mvMORPH", "openssl", "parallelly", "prodlim", "ps", "quantreg", "raster", "RcppArmadillo", "RCurl", "rgl", "rmarkdown", "RSQLite", "scatterplot3d", "segmented", "seqinr", "servr", "sf", "spacetime", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spelling", "stars", "terra", "testthat", "wk", "xfun", "XML"))
library(geomorph)
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
rmarkdown::metadata$output
library(kableExtra)
y <- x + rnorm()
x <- rnorm(30)
y <- x + rnorm()
y <- x + rnorm(30)
cor(x,y)
plot(x,y)
x <- x + c(rep(5,10),rep(-2,10),rep(0,10))
plot(x,y)
y <- y + c(rep(1,10),rep(-1,10),rep(0,10))
spec <- gl(3,10)
spec
anova(lm(y~x*spec))
plot(x,y)
x.r <- resid(lm(x~spec))
y.r <- resid(lm(y~spec))
x.r
plot(x.r,y.r)
anova(lm(y.r~x.r*spec))
anova(lm(y~x.r*spec))
anova(lm(y.r~x*spec))
anova(lm(y~x*spec))
anova(lm(y.r~x.r*spec))
tinytex::reinstall_tinytex(repository = "illinois")
setwd("C:/DeanData/manuscripts/Submitted/2022-PristurusAllometry/pristurus_allometry/2023_03_24_Revision1/Analyses")
setwd("C:/DeanData/manuscripts/Submitted/2022-PristurusAllometry/pristurus_allometry/Analyses")
# packages ----
libs <- c('geomorph', 'RRPP', 'phytools', 'geiger', 'tidyverse',
'ggphylomorpho')
easypackages::libraries(libs)
# 0: Data Prep ----
data0 <- read.table('data/morpho/morpho_pristurus.csv', sep = ';', dec = '.', header = TRUE, stringsAsFactors = TRUE)
sp.to.keep <- names(which(table(data0$species) >= 5))
data <- data0[data0$species %in% sp.to.keep, ]
data$species <- droplevels(data$species)
data$SVL <- log(data$SVL)
shape <- as.matrix(log(data[, 8:ncol(data)]))
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad, species = data$species)
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
sz.mn <- tapply(rdf$svl,rdf$species,mean)
hab.mn <- as.factor(by(rdf$habitat,rdf$species,unique))
levels(hab.mn) <- levels(rdf$habitat)
tree <- treedata(phy = tree0, data = LS.mns)$phy
C <- vcv.phylo(tree)
# Set title size for plots ----
title_sz <- 12
# Evolutionary allometry ----
allom.sp <- lm.rrpp(LS.mns~sz.mn, Cov = C)
allom.sp.plot <- plot(allom.sp, predictor = as.numeric(sz.mn),
type = 'regression', reg.type = 'RegScore', pch = 16)
gg_df_evol <- data.frame(pred = -allom.sp.plot$PredLine,
RegScore = allom.sp.plot$RegScore[,1],
SVL = sz.mn)
gg_evol <- ggplot(data = gg_df_evol, aes(x = SVL)) +
geom_point(aes(y = RegScore), color = 'transparent',
fill = 'gray60', size = 5, pch = 21, alpha = 0.7) +
geom_line(aes(y = pred), color = 'gray30', size = 0.8) +
labs(title = 'Evolutionary allometry', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz))
# Individual allometry ----
allom.ind <- lm.rrpp(shape~svl, data = rdf)
allom.ind.plot <- plot(allom.ind, predictor = rdf$svl,
type = 'regression', reg.type = 'RegScore', pch = 16)
gg_df_ind <- data.frame(pred = allom.ind.plot$PredLine,
RegScore = allom.ind.plot$RegScore[,1],
SVL = rdf$svl)
gg_ind <- ggplot(data = gg_df_ind, aes(x = SVL)) +
geom_point(aes(y = RegScore),
color = 'gray60', size = 1, pch = 16, alpha = 0.7) +
geom_line(aes(y = pred), color = 'black', size = 0.8) +
labs(title = 'Static allometry', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz))
# Evolutionary allometry -- Habitat ----
allom.sp.hab <- lm.rrpp(LS.mns~sz.mn*hab.mn, Cov = C)
allom.sp.hab.plot <- plot(allom.sp.hab, predictor = as.numeric(sz.mn),
type = 'regression', reg.type = 'RegScore', pch = 16)
gg_df_evol_hab <- data.frame(pred = -allom.sp.hab.plot$PredLine,
RegScore = allom.sp.hab.plot$RegScore[,1],
SVL = sz.mn,
habitat = hab.mn)
hab.colors <- c(ground = "#F1B670", rock = "#683B5E", tree = "#E93F7B")
gg_evol_hab <- ggplot(data = gg_df_evol_hab, aes(x = SVL)) +
geom_point(aes(y = RegScore, fill = habitat), color = 'transparent',
size = 5, pch = 21, alpha = 0.7) +
geom_line(aes(y = pred, color = habitat), size = 1) +
scale_fill_manual(values = hab.colors) +
scale_color_manual(values = hab.colors) +
labs(title = 'Evolutionary allometry per habitat', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz),
legend.position = 'none')
# Static allometry -- Habitat ----
allom.ind.hab <- lm.rrpp(shape~svl*habitat, data = rdf)
allom.ind.hab.plot <- plot(allom.ind.hab, predictor = rdf$svl,
type = 'regression', pch = 16,
col = hab.colors[as.numeric(rdf$habitat)])
gg_df_ind_hab <- data.frame(pred = allom.ind.hab.plot$PredLine,
RegScore = allom.ind.hab.plot$RegScore[,1],
SVL = rdf$svl,
habitat = rdf$habitat)
gg_ind_hab <- ggplot(data = gg_df_ind_hab, aes(x = SVL)) +
geom_point(aes(y = RegScore, color = habitat),
size = 1, pch = 16, alpha = 0.7) +
geom_line(aes(y = pred, color = habitat), size = 1) +
scale_color_manual(values = hab.colors) +
labs(title = 'Habitat-based static allometry', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz),
legend.position = 'none')
# Static allometry -- Species ----
allom.ind.sp <- lm.rrpp(shape~svl*species, data = rdf)
allom.ind.sp.plot <- plot(allom.ind.sp, predictor = rdf$svl,
type = 'regression', pch = 16,
col = hab.colors[as.numeric(rdf$habitat)])
gg_df_ind_sp <- data.frame(pred = allom.ind.sp.plot$PredLine,
RegScore = allom.ind.sp.plot$RegScore[,1],
SVL = rdf$svl,
species = rdf$species,
habitat = rdf$habitat)
gg_ind_sp <- ggplot(data = gg_df_ind_sp, aes(x = SVL)) +
geom_point(aes(y = RegScore, color = habitat),
size = 1, pch = 16, alpha = 0.7) +
geom_line(aes(y = pred, color = habitat, group = species),
size = 1) +
scale_color_manual(values = hab.colors) +
labs(title = 'Intraspecific static allometry',
subtitle = '(colored by habitat)', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz),
plot.subtitle = element_text(hjust = 0.5, face = 'plain'),
legend.position = 'none')
libs <- c('geomorph', 'RRPP', 'phytools', 'geiger', 'tidyverse')
easypackages::libraries(libs)
# 0: Data Prep ----
data0 <- read.table('data/morpho/morpho_pristurus.csv', sep = ';', dec = '.', header = TRUE, stringsAsFactors = TRUE)
sp.to.keep <- names(which(table(data0$species) >= 5))
data <- data0[data0$species %in% sp.to.keep, ]
data$species <- droplevels(data$species)
data$SVL <- log(data$SVL)
shape <- as.matrix(log(data[, 8:ncol(data)]))
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad, species = data$species)
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
sz.mn <- tapply(rdf$svl,rdf$species,mean)
hab.mn <- as.factor(by(rdf$habitat,rdf$species,unique))
levels(hab.mn) <- levels(rdf$habitat)
tree <- treedata(phy = tree0, data = LS.mns)$phy
C <- vcv.phylo(tree)
### NEW for Revision
SVL.resid <- resid(lm(data$SVL~data$species))
shape.resid <- resid(lm(shape~data$species))
rdf2 <- rrpp.data.frame(svl = SVL.resid, shape = shape.resid,
habitat = data$habitat_broad,
species = data$species)
# 1: Evolutionary Allometry ----
allom.sp <- lm.rrpp(LS.mns~sz.mn, Cov = C)
# 5: phylomorphospace of size-standardized data (residuals) ----
shape.res <- residuals(allom.sp)
pca.w.phylo <- gm.prcomp(shape.res, phy = tree)
plot(pca.w.phylo, phylo = TRUE, pch = 21, bg = 'black', phylo.par = list(node.labels = FALSE))
###### NEW PHYLOMORPHOSPACE: no phylogeny
allom2.sp <- lm.rrpp(LS.mns~sz.mn)
###### NEW PHYLOMORPHOSPACE: no phylogeny
allom2.sp <- lm.rrpp(LS.mns~sz.mn)
shape2.res <- residuals(allom2.sp)
pca.w.phylo2 <- gm.prcomp(shape2.res, phy = tree)
plot(pca.w.phylo2, phylo = TRUE, pch = 21, bg = 'black', phylo.par = list(node.labels = FALSE))
### NEW for Revision
SVL.resid <- resid(lm(data$SVL~data$species))
shape.resid <- resid(lm(shape~data$species))
rdf2 <- rrpp.data.frame(svl = SVL.resid, shape = shape.resid,
habitat = data$habitat_broad,
species = data$species)
# 1: Evolutionary Allometry ----
allom.sp <- lm.rrpp(LS.mns~sz.mn, Cov = C)
allom.ind <- lm.rrpp(shape~svl, data = rdf2)  #CHANGED 3/22/2023
anova(allom.sp)
anova(allom.ind)
M <-rbind(coef.evol <- allom.sp$LM$gls.coefficients[2,],
coef.ind <- allom.ind$LM$coefficients[2,])
M
# 2: MANCOVA & comparison of allometry among habitats ----
fit.hab <- lm.rrpp(shape~svl*habitat, data = rdf2)  #CHANGED 3/22/2023
# 2A: Compare habitat vectors versus isometry and to each other
#H_0: isometry as common slope model
mn.sz <- tapply(rdf$svl,rdf$habitat,mean)
mn.shape <- rowsum(rdf2$shape, rdf$habitat)/as.vector(table(rdf$habitat)) #CHANGED 3/22/2023
coef.iso <- c(1,1,1,1,1,1,1,1)
intercepts <- mn.shape - t(tcrossprod(coef.iso,mn.sz))
X <- model.matrix(~rdf$svl+rdf$habitat)
b <- rbind(intercepts[1,],coef.iso,intercepts[2,]-intercepts[1,],
intercepts[3,]-intercepts[1,])
preds <- X%*%b
E.iso <- rdf2$shape - preds
perms <- RRPP:::perm.index(n = fit.hab$LM$n, iter = 999)
slopes <- list()
for(j in 1:1000){ #CHANGED 3/22/2023
slopes[[j]] <- pairwise(lm.rrpp((preds+E.iso[perms[[j]],]) ~ rdf2$svl*rdf2$habitat, iter=0),
groups = rdf2$habitat,covariate = rdf2$svl)$slopes[[1]]
}
slp.ang <- lapply(1:1000, function(j) acos(RRPP:::vec.cor.matrix(rbind(slopes[[j]],coef.iso)))*180/pi)
slp.hab.obs <- slp.ang[[1]]
slp.Z <- RRPP:::effect.list(slp.ang)
slp.P <- RRPP:::Pval.list(slp.ang)
slp.hab.obs
slp.Z
slp.P #all different from isometry, and ground different from rock and tree
# 2B: Compare evolutionary and static (habitat) allometry
#H_0: common slope isometry
slp.ang.ev <- lapply(1:1000, function(j) acos(RRPP:::vec.cor.matrix(rbind(coef.evol,slopes[[j]])))*180/pi)
slp.hab.ev.obs <- slp.ang.ev[[1]]
slp.Z.ev <- RRPP:::effect.list(slp.ang.ev)
slp.P.ev <- RRPP:::Pval.list(slp.ang.ev)
slp.hab.ev.obs
slp.Z.ev
slp.P.ev  #not different from evol. allometry
res <- cbind(slp.hab.ev.obs[-1,1],slp.Z.ev[-1,1],slp.P.ev[-1,1])
colnames(res) <- c("Angle","Effect Size", "P-value")
rownames(res) <- c("Ev vs. Ground", "Ev vs. Rock", "Ev vs. Tree")
res
# 3: Map allometry slopes on phylogeny ----
head.scores <- two.b.pls(shape[, c(2:4)], rdf2$svl)$XScores[, 1]
rdf2$svl
# 3: Map allometry slopes on phylogeny ----
head.scores <- two.b.pls(shape[, c(2:4)], rdf2$svl)$XScores[, 1]
libs <- c('geomorph', 'RRPP', 'phytools', 'geiger', 'tidyverse')
easypackages::libraries(libs)
# 0: Data Prep ----
data0 <- read.table('data/morpho/morpho_pristurus.csv', sep = ';', dec = '.', header = TRUE, stringsAsFactors = TRUE)
sp.to.keep <- names(which(table(data0$species) >= 5))
data <- data0[data0$species %in% sp.to.keep, ]
data$species <- droplevels(data$species)
data$SVL <- log(data$SVL)
shape <- as.matrix(log(data[, 8:ncol(data)]))
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad, species = data$species)
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
sz.mn <- tapply(rdf$svl,rdf$species,mean)
hab.mn <- as.factor(by(rdf$habitat,rdf$species,unique))
levels(hab.mn) <- levels(rdf$habitat)
tree <- treedata(phy = tree0, data = LS.mns)$phy
C <- vcv.phylo(tree)
### NEW for Revision
SVL.resid <- resid(lm(data$SVL~data$species))
shape.resid <- resid(lm(shape~data$species))
rdf2 <- rrpp.data.frame(svl = SVL.resid, shape = shape.resid,
habitat = data$habitat_broad,
species = data$species)
# 1: Evolutionary Allometry ----
allom.sp <- lm.rrpp(LS.mns~sz.mn, Cov = C)
allom.ind <- lm.rrpp(shape~svl, data = rdf2)  #CHANGED 3/22/2023
anova(allom.sp)
anova(allom.ind)
M <-rbind(coef.evol <- allom.sp$LM$gls.coefficients[2,],
coef.ind <- allom.ind$LM$coefficients[2,])
acos(RRPP:::vec.cor.matrix(M))*180/pi  #virtually parallel (angle of 1.49 degrees)
# 2: MANCOVA & comparison of allometry among habitats ----
fit.hab <- lm.rrpp(shape~svl*habitat, data = rdf2)  #CHANGED 3/22/2023
anova(fit.hab)
# 2A: Compare habitat vectors versus isometry and to each other
#H_0: isometry as common slope model
mn.sz <- tapply(rdf$svl,rdf$habitat,mean)
mn.shape <- rowsum(rdf2$shape, rdf$habitat)/as.vector(table(rdf$habitat)) #CHANGED 3/22/2023
coef.iso <- c(1,1,1,1,1,1,1,1)
intercepts <- mn.shape - t(tcrossprod(coef.iso,mn.sz))
X <- model.matrix(~rdf$svl+rdf$habitat)
b <- rbind(intercepts[1,],coef.iso,intercepts[2,]-intercepts[1,],
intercepts[3,]-intercepts[1,])
preds <- X%*%b
E.iso <- rdf2$shape - preds
perms <- RRPP:::perm.index(n = fit.hab$LM$n, iter = 999)
slopes <- list()
for(j in 1:1000){ #CHANGED 3/22/2023
slopes[[j]] <- pairwise(lm.rrpp((preds+E.iso[perms[[j]],]) ~ rdf2$svl*rdf2$habitat, iter=0),
groups = rdf2$habitat,covariate = rdf2$svl)$slopes[[1]]
}
slp.ang <- lapply(1:1000, function(j) acos(RRPP:::vec.cor.matrix(rbind(slopes[[j]],coef.iso)))*180/pi)
slp.hab.obs <- slp.ang[[1]]
slp.Z <- RRPP:::effect.list(slp.ang)
slp.P <- RRPP:::Pval.list(slp.ang)
slp.hab.obs
slp.Z
slp.P #all different from isometry, and ground different from rock and tree
# 2B: Compare evolutionary and static (habitat) allometry
#H_0: common slope isometry
slp.ang.ev <- lapply(1:1000, function(j) acos(RRPP:::vec.cor.matrix(rbind(coef.evol,slopes[[j]])))*180/pi)
slp.hab.ev.obs <- slp.ang.ev[[1]]
slp.Z.ev <- RRPP:::effect.list(slp.ang.ev)
slp.P.ev <- RRPP:::Pval.list(slp.ang.ev)
slp.hab.ev.obs
slp.Z.ev
slp.P.ev  #not different from evol. allometry
res <- cbind(slp.hab.ev.obs[-1,1],slp.Z.ev[-1,1],slp.P.ev[-1,1])
colnames(res) <- c("Angle","Effect Size", "P-value")
rownames(res) <- c("Ev vs. Ground", "Ev vs. Rock", "Ev vs. Tree")
res
head.scores <- plot(lm.rrpp(shape[, c(2:4)]~ rdf$svl),
type = "regression", predictor = rdf$svl, reg.type = "RegScore")$RegScore
limb.scores <- plot(lm.rrpp(shape[, c(5:8)]~ rdf$svl),
type = "regression", predictor = rdf$svl, reg.type = "RegScore")$RegScore
coef.head <- lm.rrpp(head.scores ~ rdf$svl*rdf$species)$LM$coefficients
coef.limb <- lm.rrpp(limb.scores ~ rdf$svl*rdf$species)$LM$coefficients
head.slp <- coef.head[grep('svl', rownames(coef.head)), ]
head.slp[-1] <- head.slp[-1] + head.slp[1]
limb.slp <- coef.limb[grep('svl', rownames(coef.limb)), ]
limb.slp[-1] <- limb.slp[-1] + limb.slp[1]
names(limb.slp) <- names(head.slp) <- levels(rdf$species)
cor(head.slp,limb.slp)
plot(head.slp,limb.slp)
contMap(tree = tree, x = head.slp, outline = FALSE)
cm.limb <- contMap(tree = tree, x = limb.slp, outline = FALSE)
cm.head <- contMap(tree = tree, x = head.slp, outline = FALSE)
cm.limb <- contMap(tree = tree, x = limb.slp, outline = FALSE)
cm.head
cm.head$cols
cm.headhead.slp
head.slp
slope.dat <- cbind(head.slp,limb.slp)
slope.dat
# 5: phylomorphospace of size-standardized data (residuals) ----
shape.res <- residuals(allom.sp)
pca.w.phylo <- gm.prcomp(shape.res, phy = tree)
class(pca.w.phylo)
pca.w.phylo
plot.ordinate(slope.dat)
plot(slope.dat, asp=1)
?ordinate
P2 <- plot(slope.dat)
add.tree(P2, PlethMorph$tree, edge.col = 4)
class(slope.dat) <- "ordinate"
P2 <- plot(slope.dat)
slope.dat$x <- cbind(head.slp,limb.slp)
class(slope.dat) <- "ordinate"
P2 <- plot(slope.dat)
slope.dat$alignment = "principal"
class(slope.dat) <- "ordinate"
P2 <- plot(slope.dat)
add.tree(P2, PlethMorph$tree, edge.col = 4)
add.tree(P2, tree, edge.col = 4)
pca.w.phylo$phy
slope.dat$x <- cbind(head.slp,limb.slp)
slope.dat$alignment = "principal"
slope.dat$phy <- tree
class(slope.dat) <- "ordinate"
P2 <- plot(slope.dat, phylo = TRUE, , pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
add.tree(P2, tree, edge.col = 4)
pca.w.phylo$alignment
slope.dat$alignment
pca.w.phylo$transform
slope.dat$transform = "FALSE"
slope.dat$phy <- tree
class(slope.dat) <- "ordinate"
P2 <- plot(slope.dat, phylo = TRUE, , pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
add.tree(P2, tree, edge.col = 4)
pca.w.phylo$anc.x
add.tree
pca.w.phylo$d
pca.w.phylo$sdev
pca.w.phylo$rotation
pca.w.phylo$center
pca.w.phylo$GLS
slope.dat$x <- cbind(head.slp,limb.slp)
slope.dat$alignment = "principal"
slope.dat$transform = "FALSE"
slope.dat$GLS = "FALSE"
slope.dat$phy <- tree
class(slope.dat) <- "ordinate"
P2 <- plot(slope.dat, phylo = TRUE, , pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
add.tree(P2, tree, edge.col = 4)
pca.w.phylo$x
slope.dat$x
names(pca.w.phylo$x)
dimnames(pca.w.phylo$x)
dimnames(slope.dat$x)
P2 <- plot(slope.dat, phylo = TRUE, pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
add.tree(P2, tree, edge.col = 4)
plot(pca.w.phylo, phylo = TRUE, pch = 21, bg = 'black', phylo.par = list(node.labels = FALSE))
pca.w.phylo$phy
tree
slope.dat <- gm.prcomp(shape.res, phy = tree)
slope.dat$x <- cbind(head.slp,limb.slp)
P2 <- plot(slope.dat, phylo = TRUE, pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
slope.dat <- cbind(head.slp,limb.slp)
slope.PCA <- gm.prcomp(slope.dat, phy = tree)
P2 <- plot(slope.PCA, phylo = TRUE, pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
slope.PCA <- gm.prcomp(shape.res, phy = tree)
slope.dat$x <- cbind(head.slp,limb.slp)   #POU
P2 <- plot(slope.dat, phylo = TRUE, pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
slope.PCA <- gm.prcomp(shape.res, phy = tree)
slope.PCA$x <- cbind(head.slp,limb.slp)
P2 <- plot(slope.dat, phylo = TRUE, pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
slope.PCA <- gm.prcomp(shape.res, phy = tree)
slope.PCA
slope.dat$x <- cbind(head.slp,limb.slp)
slope.dat$alignment = "principal"
slope.dat$transform = "FALSE"
slope.dat$GLS = "FALSE"
slope.dat$phy <- tree
class(slope.dat) <- "ordinate"
P2 <- plot(slope.dat, phylo = TRUE, pch = 21, bg = 'black',
phylo.par = list(node.labels = FALSE))
add.tree(P2, tree, edge.col = 4)
