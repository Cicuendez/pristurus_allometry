?cbind
library(geomorph)
?pairwise
library(geomorph)
?trajectory.analysis
x <- matrix(1,nrow=10,ncol=3)
x
y <- matrix(4,nrow=9,ncol=3)
y
x[2:10]+y
library(geomorph)
?ordinate
gm.prcomp
?geomorph:::gm.prcomop
?geomorph:::gm.prcomp
gm.prcomp
geomorph:::gm.prcomp
geomorph:::plot.gm.prcomp
geomorph:::phylo.par
?pairwise
?geomorph:::plot.gm.prcomp
geomorph:::plot.gm.prcomp
devtools::install_github('geomorphR/geomorph', ref = "Develop")
library(geomorph)
?gm.prcomp
data(plethspecies)
Y.gpa <- gpagen(plethspecies$land)    #GPA-alignment
###  Traditional PCA
PCA <- gm.prcomp(Y.gpa$coords)
summary(PCA)
plot(PCA, main = "PCA")
plot(PCA,axes = F)
plot(PCA,axes = FALSE)
plot(PCA,add.abline =  FALSE)
plot(PCA,add.abline =  FALSE)
plot.gm.prcomp
geomorph:::plot.gm.prcomp
plot(PCA,add.abline =  F)
plot(PCA,add.abline =  TRUE)
plot(PCA)
devtools::install_github('geomorphR/geomorph', ref="Develop")
library(geomorph)
?plot.gm.prcomp
data(plethspecies)
Y.gpa <- gpagen(plethspecies$land)
PCA <- gm.prcomp(Y.gpa$coords)
summary(PCA)
plot(PCA, main = "PCA")
plot(PCA, add.abline = FALSE)
PCA.w.phylo <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy)
summary(PCA.w.phylo)
plot(PCA.w.phylo, phylo = TRUE, main = "PCA.w.phylo")
plot(PCA.w.phylo, add.abline = FALSE)
library(RRPP)
?ordinate
data("PlethMorph")
Y <- as.data.frame(PlethMorph[c("TailLength", "HeadLength",
"Snout.eye", "BodyWidth",
"Forelimb", "Hindlimb")])
Y <- as.matrix(Y)
R <- lm.rrpp(Y ~ SVL, data = PlethMorph,
iter = 0, print.progress = FALSE)$LM$residuals
PCA.ols <- ordinate(R, scale. = TRUE)
PCA.gls <- ordinate(R, scale. = TRUE,
transform. = FALSE,
Cov = PlethMorph$PhyCov)
plot(PCA.ols)
plot(PCA.ols, axes = FALSE)
plot(PCA.gls)
plot(PCA.gls, axes = FALSE)
?plot.ordinate
RRPP:::plot.ordinate
?geomorph:::plot.gm.prcomp
plot(PCA.gls, phylo = TRUE)
geomorph:::plot.gm.prcomp
geomorph:::add.tree
RRPP:::add.tree
add.tree(PlethMorph$tree)
plot(PCA.gls, axes = FALSE)
add.tree(PlethMorph$tree)
plot(PCA.gls)
add.tree(PlethMorph$tree)
class(PCA.ols)
class(PCA.gls)
plot(PCA.gls)
add.tree(PlethMorph$tree)
new <- plot(PCA.gls)
add.tree(PlethMorph$tree)
new <- plot(PCA.gls)
add.tree(PlethMorph$tree)
?add.tree
add.tree(new,PlethMorph$tree)
new <- plot(PCA.gls, axes = FALSE)
add.tree(new,PlethMorph$tree)
devtools::install_packages('mlcollyer/RRPP', ref="develop")
devtools::install_github('mlcollyer/RRPP', ref="develop")
library(geomorph)
data("PlethMorph")
Y <- as.data.frame(PlethMorph[c("TailLength", "HeadLength",
"Snout.eye", "BodyWidth",
"Forelimb", "Hindlimb")])
Y <- as.matrix(Y)
R <- lm.rrpp(Y ~ SVL, data = PlethMorph,
iter = 0, print.progress = FALSE)$LM$residuals
PCA.ols <- ordinate(R, scale. = TRUE)
PCA.gls <- ordinate(R, scale. = TRUE,
transform. = FALSE,
Cov = PlethMorph$PhyCov)
plot(PCA.ols)
plot(PCA.ols, axes = FALSE)
plot(PCA.gls)
plot(PCA.gls, axes = FALSE)
?plot.ordinate
plot(PCA.ols, include.axes = FALSE)
?prcomp
?gm.prcomp
### geomorph
data(plethspecies)
Y.gpa <- gpagen(plethspecies$land)    #GPA-alignment
PCA <- gm.prcomp(Y.gpa$coords)
pPCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy)
plot(PCA, main = "PCA", phylo = TRUE)
plot(pPCA, phylo = TRUE, main = "PCA.w.phylo")
phylo.PCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy, GLS = TRUE)
PCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy)
phylo.PCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy, GLS = TRUE)
plot(pPCA, phylo = TRUE, main = "PCA.w.phylo")
plot(phylo.PCA, phylo = TRUE, main = "phylo PCA")
plot(pPCA, phylo = TRUE, main = "PCA.w.phylo", include.axes = FALSE)
plot(pPCA, phylo = TRUE, main = "PCA.w.phylo")
plot(pPCA, phylo = TRUE, main = "PCA.w.phylo", include.axes = FALSE)
plot(phylo.PCA, phylo = TRUE, main = "phylo PCA", include.axes = FALSE)
?RRPP:::plot.ordinate
devtools::install_github('geomorphR/geomorph', ref="Develop")
install.packages('Rcpp')
install.packages('tibble')
install.packages(c("broom", "bslib", "callr", "caret", "castor", "cubature", "dbplyr", "deSolve", "devtools", "dplyr", "dtplyr", "fontawesome", "forcats", "future", "future.apply", "generics", "gert", "ggforce", "ggraph", "globals", "gmp", "googlesheets4", "graphlayouts", "gtools", "hardhat", "haven", "hms", "httr", "hunspell", "igraph", "interp", "latticeExtra", "lme4", "lobstr", "MCMCglmm", "meta", "metafor", "modelr", "ncbit", "paleotree", "parallelly", "phytools", "pkgload", "processx", "progressr", "quantreg", "R.cache", "R.utils", "raster", "RcppArmadillo", "RCurl", "readxl", "recipes", "reprex", "rhub", "rlang", "rmarkdown", "roxygen2", "RSQLite", "rstudioapi", "rversions", "rvest", "s2", "sass", "scholar", "sf", "shiny", "shinyWidgets", "spam", "spData", "spdep", "statmod", "terra", "tidygraph", "tidyverse", "timeDate", "tinytex", "tweenr"))
library(geomorph)
data("pupfish")
Pupfish$CS
data("Pupfish")
gp <- intersect(Pupfish$Pop,Pupfish$Sex)
gp
?lm.rrpp
gp <- interaction(Pupfish$Pop,Pupfish$Sex)
gp
fit <- lm.rrpp(Pupfish$CS~gp)
fit <- lm.rrpp(Pupfish$CS~gp, iter = 4999)
anova(fit)
fit$PermInfo$perms
fit$ANOVA$Fs
plot(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs)
density(fit$ANOVA$Fs)
plot(density(fit$ANOVA$Fs))
hist(fit$ANOVA$Fs, breaks = 20)
hist(fit$ANOVA$Fs, breaks = 40)
hist(fit$ANOVA$Fs, breaks = 60)
hist(fit$ANOVA$Fs, breaks = 80)
density(fit$ANOVA$Fs)
curve(density(fit$ANOVA$Fs))
lines(density(fit$ANOVA$Fs))
?density
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
plot(density(fit$ANOVA$Fs))
?ks
?ks.test
ks.test(fit$ANOVA$Fs,"F")
ks.test(fit$ANOVA$Fs,"pnorm")
anova(fit)
fit$ANOVA$\
fit$ANOVA$df
fit$ANOVA$df[1]
ks.test(fit$ANOVA$Fs,pf(fit$ANOVA$df[1],fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,pf(df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,df(df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
df(fit$ANOVA$Fs,3,50)
df(4999,3,50)
rf(4999,3,50)
hist(rf(4999,3,50))
density(rf(4999,3,50))
plot(density(rf(4999,3,50)))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
anova(fit)
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
plot(density(fit$ANOVA$Fs))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
library(geomorph)
data("Pupfish")
gp <- interaction(Pupfish$Pop,Pupfish$Sex)
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
anova(fit)
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
plot(density(fit$ANOVA$Fs))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
hist(fit$ANOVA$Fs, breaks = 80)
points(density(fit$ANOVA$Fs))
points(fit$ANOVA$Fs,density(fit$ANOVA$Fs))
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs), col = 4, lwd = 2)
hist(fit$ANOVA$Fs, breaks = 80, ylim = c(0, max(fit$ANOVA$Fs)))
hist(fit$ANOVA$Fs, breaks = 80, xlim = c(0, max(fit$ANOVA$Fs)))
lines(density(fit$ANOVA$Fs), col = 4, lwd = 2)
X <- fit$ANOVA$Fs
X <- fit$ANOVA$Fs
hist(x, breaks = 80)
x <- fit$ANOVA$Fs
hist(x, breaks = 80)
seq(min(x), max(x), length = 40)
seq(min(x), max(x), length = 80)
lines(seq(min(x), max(x), length = 80),density(fit$ANOVA$Fs), col = 4, lwd = 2)
hist(x, breaks = 80)
lines(density(x), col = 4, lwd = 2)
plot(density(x))
hist(x, breaks = 80,freq = T)
hist(x, breaks = 80,freq = F)
lines(density(x), col = 4, lwd = 2)
lines(density(x), col = "red", lwd = 2)
levels(gp)
nlevels(gp)
Pupfish$CS
length(Pupfish$CS)
length(Pupfish$CS)-nlevels(gp)
df.theory <- df(density(Pupfish$CS, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
)
df.theory <- df(density(Pupfish$CS), nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
density(Pupfish$CS)$x
df.theory <- df(density(Pupfish$CS)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
df.theory
df.theory <- df(density(Pupfish$CS)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
obs <- density(Pupfish$CS)
df.theory <- df(density(Pupfish$CS)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
obs <- density(Pupfish$CS)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
points(df.ols.ols[[1]]$x,df.theory, col = "red", lwd = 2)
points(obs$x,df.theory, col = "red", lwd = 2)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
points(obs$x,df.theory, col = "red", lwd = 2)
lines(obs$x,df.theory, col = "red", lwd = 2)
obs
obs$x
df.theory
df.theory <- df(density(fit$ANOVA$Fs)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
fit$ANOVA$df
df.theory <- df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2])
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
data("Pupfish")
gp <- interaction(Pupfish$Pop,Pupfish$Sex)
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
df.theory <- df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2])
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
library(geomorph)
data("Pupfish")
gp <- interaction(Pupfish$Pop,Pupfish$Sex)
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
df.theory <- df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2])
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x)
)
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x,df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
length(fit$ANOVA$Fs)
length(df(density(fit$ANOVA$Fs)$x)
)
#not working. Figure it out
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#I think this is correct
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
?lm.rrpp
?RRPP::lm.rrpp
library(RRPP)
?lm.rrpp
devtools::install_githbub('mlcollyer/RRPP', ref="develop", build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP', ref="develop", build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP', build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP', build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP')
install.packages(c("cli", "lifecycle"))
devtools::install_github('mlcollyer/RRPP', build_vignettes = TRUE)
library(nlme)
?gls
x = rnorm(100, mean = 10, sd = 2)
y = rnorm(100, mean = 20, sd = 2)
bimodal =c(x,y)
shapiro.test(bimodal)
hist(bimodal)
Transformation with Box-Cox
library(geoR)
lambda=boxcoxfit(bimodal)$lambda
bin.tr.bc=((bimodal^lambda)-1)/(lambda)
shapiro.test(bin.tr.bc)
install.packages("geoR")
library(geoR)
lambda=boxcoxfit(bimodal)$lambda
bin.tr.bc=((bimodal^lambda)-1)/(lambda)
shapiro.test(bin.tr.bc)
hist(bin.tr.bc)
Log
shapiro.test(log(bimodal))
hist(log(bimodal))
Square root
shapiro.test(sqrt(bimodal))
hist(sqrt(bimodal))
shapiro.test((log(bimodal))^2)
hist((log(bimodal))^2)
log exponent 1.5
shapiro.test((log(bimodal))^1.5)
hist((log(bimodal))^1.5)
shapiro.test((bimodal)^(1/3))
hist((bimodal)^(1/3))
shapiro.test(asin((bimodal/max(bimodal))^(1/2)))
hist(asin((bimodal/max(bimodal))^(1/2)))
transformed <- abs(binomial - mean(binomial))
transformed <- abs(bimodal - mean(bimodal))
shapiro.test(transformed)
hist(transformed)
data:  transformed
setwd("C:/DeanData/manuscripts/Submitted/2022-PristurusAllometry/pristurus_allometry/Analyses")
libs <- c('RRPP', 'phytools', 'geiger', 'tidyverse')
easypackages::libraries(libs)
data0 <- read.table('data/morpho/morpho_pristurus.csv', sep = ';', dec = '.', header = TRUE)
sp.to.keep <- names(which(table(data0$species) >= 5))
data <- data0[data0$species %in% sp.to.keep, ]
data$species <- as.factor(data$species)
data$habitat_broad <- as.factor(data$habitat_broad)
data$SVL <- log(data$SVL)
shape <- as.matrix(log(data[, 8:ncol(data)]))
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad,
species = data$species)
# Comparison of multivariate allometry among habitat types
fit.hab <- lm.rrpp(shape~svl*habitat, data = rdf)
anova(fit.hab)
pw.hab <- pairwise(fit.hab, groups = rdf$habitat, covariate = rdf$svl)
summary(pw.hab, type = 'VC', stat.table = FALSE)
#Slopes by habitat
fit.coef <- fit.hab$LM$coefficients
ind.coef <- rbind(fit.coef[2,], fit.coef[2,]+fit.coef[5,], fit.coef[2,]+fit.coef[6,])
rownames(ind.coef) <- c("Ground","Rock", "Tree")
# Analysis using species means
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
sz.mn <- tapply(rdf$svl,rdf$species,mean)
interaction(rdf$species,rdf$habitat)
levels(interaction(rdf$species,rdf$habitat))
intersect(rdf$species,rdf$habitat)
unique(rdf$habitat,rdf$species)
?collapse
collapse(rdf$habitat,rdf$species)
collapse(rdf$habitat)
hab.mn <- rdf$habitat[which(rdf$habitat%in%rdf$species == "TRUE"),]
hab.mn <- rdf$habitat[which(rdf$habitat%in%rdf$species == "TRUE")]
hab.mn
which(rdf$habitat%in%rdf$species == "TRUE")
rdf$habitat%in%rdf$species
intersect
?intersect
by(rdf$svl,function(x) rdf$habitat[x])
by(rdf$svl,unique(rdf$habitat))
unique(rdf$habitat)
?unique
by(rdf$species,rdf$habitat,unique)
by(rdf$habitat,rdf$species,unique)
by(levels(rdf$habitat),rdf$species,unique)
hab.mn <- as.factor(by(rdf$habitat,rdf$species,unique))
hab.mn
levels(rdf$habitat)
rdf
View(data)
levels(rdf$habitat)
hab.mn
levels(rdf$habitat)
levels(hab.mn) <- levels(rdf$habitat)
hab.mn
names(hab.mn)
names(sz.mn)
rdf.sp <- rrpp.data.frame(svl = sz.mn, shape = LS.mns, habitat = hab.mn)
fit.sp <- lm.rrpp(shape~svl*habitat,data = rdf.sp)
rdf.sp
lm.rrpp(LS.mns~sz.mn)
lm.rrpp(LS.mns~sz.mn*hab.mn)
rdf.sp <- rrpp.data.frame(sz.mn = sz.mn, LS.mns = LS.mns, hab.mn = hab.mn)
rdf.sp <- rrpp.data.frame(sz.mn = sz.mn, LS.mns = LS.mns, hab.mn = hab.mn)
fit.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn, data = rdf.sp)
# get species habitats
# Drop species with less than 5 individuals from the tree
data.sp <- data.sp %>%
filter(species %in% sp.to.keep)
rdf.sp <- rrpp.data.frame(sz.mn = sz.mn, LS.mns = LS.mns, hab.mn = hab.mn)
fit.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn, data = rdf.sp)
fit.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn)
anova(fit.sp)
pairwise(fit.sp,groups = hab.mn, covariate = sz.mn)
pw.hab.sp <- pairwise(fit.sp,groups = hab.mn, covariate = sz.mn)
summary(pw.hab.sp, type = 'VC', stat.table = FALSE)
fit.coef.sp <- fit.hab.sp$LM$coefficients
fit.hab.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn)
anova(fit.hab.sp)
pw.hab.sp <- pairwise(fit.hab.sp,groups = hab.mn, covariate = sz.mn)
summary(pw.hab.sp, type = 'VC', stat.table = FALSE)
fit.coef.sp <- fit.hab.sp$LM$coefficients
sp.coef <- rbind(fit.coef.sp[2,], fit.coef.sp[2,]+fit.coef.sp[5,], fit.coef.sp[2,]+fit.coef.sp[6,])
rownames(sp.coef) <- c("Ground","Rock", "Tree")
ind.coef
sp.coef
plot(fit.hab.sp, type = "regression")
plot(fit.hab.sp, type = "regression",predictor = sz.mn)
tree0 <- read.nexus('Analyses/data/phylogeny/pristurus_tree_final.nex')
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
treedata(phy = tree0, data = LS.mns)
tree <- treedata(phy = tree0, data = LS.mns)$phy
plot(tree)
C <- vcv.phylo(tree)
fit.hab.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn, Cov = C)
anova(fit.hab.sp)
fit.hab.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn)
anova(fit.hab.sp)
### NOTE: when accounting for phylogeny, evol. allometry still present, but not the habitat effect
fit.hab.sp.phy <- lm.rrpp(LS.mns~sz.mn*hab.mn, Cov = C)
anova(fit.hab.sp.phy)
