data(mosquito)
Y.gpa <- gpagen(mosquito$wingshape)
gdf <- geomorph.data.frame(shape = Y.gpa$coords,
ind = mosquito$ind, #for some reason, "individual" or "critter" didn't work, only "ind" did.
side = mosquito$side,
replicate = mosquito$rep)
wing.sym <- bilat.symmetry(A = Y.gpa, ind = ind, side=side,data = gdf, #modelling code from examples in manual
object.sym = FALSE)
wing.anova<-procD.lm(shape ~ ind + side + ind/side, data= gdf)  #same compared to model in guts of bilat.symmetry() code?
wing.sym$shape.anova
anova(wing.anova, error = c("ind:side", "ind:side","Residuals"))
N <- 8
tree <- compute.brlen(stree(N, type = "balanced"))
plot(tree)
library(ape)
library(geiger)
N <- 8
tree <- compute.brlen(stree(N, type = "balanced"))
plot(tree)
tree.s <- rescale(tree, model = "lambda", 0.5)
tree.s <- rescale(tree, model = "lambda", 0.5)
plot(tree.s)
vcv.phylo(tree.s)
solve(vcv.phylo(tree.s))
solve(vcv.phylo(tree))
solve(vcv.phylo(rescale(tree, model = "lambda", 1)))
solve(vcv.phylo(rescale(tree, model = "lambda", .5)))
solve(vcv.phylo(rescale(tree, model = "lambda", .1)))
library(geomorhp)
library(geomorph)
?procD.lm
?trajectory.analysis
library(geomorph)
phylo.integration
geomorph:::plot.pls
library(geomorph)
data(plethodon)
library(ape)
data(plethspecies)
x <- vcv.phylo(plethspecies$phy)
y <- geomorph:::phylo.mat(x,plethspecies$phy)
y$D.mat
y$D.mat%*%y.Dmat
y$D.mat%*%y$D.mat
y$D.mat%*%t(y.Dmat)
y$D.mat%*%t(y$D.mat)
y$D.mat*y$D.mat
library(mvtnorm)
library(geomorph)
p=10
n=200
S <- matrix(0.75, nrow=p,ncol=p); diag(S) <- 1
S
Y <- rmvnorm(n=n, mean = rep(6,p), sigma = S)
pairsY
pairs(Y)
# now remove some
Y[170:200,8:10] <- NA
View(Y)
geomorph:::estimate.missing
A <- Y  #(to match notation)
spec.NA <- which(rowSums(is.na(A)) > 0)
spec.NA
land.NA <- which(colSums(is.na(A)) > 0)
land.NA
p <- dim(A)[1]
k <- dim(A)[2]
A2 <- A
complete <- A[, -spec.NA]
dim(complete)
complete <- A[-spec.NA,]
incomplete <- A[spec.NA,]
dim(complete)
dim(incomplete)
length(spec.NA)
i=1
missing.coord <- which(is.na(A.2[spec.NA[i], ]))
missing.coord <- which(is.na(A2[spec.NA[i], ]))
missing.coord
A2
dim(A2)
x <- A2[-spec.NA, -missing.coord]
y <- A2[-spec.NA, missing.coord]
dim(x)
dim(y)
XY.vcv <- cov(cbind(x, y))
S12 <- XY.vcv[1:dim(x)[2], (dim(x)[2] + 1):(dim(x)[2] +
dim(y)[2])]
pls <- svd(S12)
U <- pls$u
V <- pls$v
XScores <- x %*% U
YScores <- y %*% V
beta <- coef(lm(YScores ~ XScores))
miss.xsc <- c(1, A2[spec.NA[i], -missing.coord] %*%
U)
miss.ysc <- miss.xsc %*% beta
pred.val <- miss.ysc %*% t(V)
pred.val
for (i in 1:length(spec.NA)) {
missing.coord <- which(is.na(A2[spec.NA[i], ]))
x <- A2[-spec.NA, -missing.coord]
y <- A2[-spec.NA, missing.coord]
XY.vcv <- cov(cbind(x, y))
S12 <- XY.vcv[1:dim(x)[2], (dim(x)[2] + 1):(dim(x)[2] +
dim(y)[2])]
pls <- svd(S12)
U <- pls$u
V <- pls$v
XScores <- x %*% U
YScores <- y %*% V
beta <- coef(lm(YScores ~ XScores))
miss.xsc <- c(1, A2[spec.NA[i], -missing.coord] %*%
U)
miss.ysc <- miss.xsc %*% beta
pred.val <- miss.ysc %*% t(V)
for (j in 1:length(pred.val)) {
A2[spec.NA[i], missing.coord[j]] <- pred.val[j]
}
}
A2
View(A2)
View(A)
devtools::install_github('mlcollyer/RRPP', ref = "develop")
3
install.packages(c("ape", "cli", "rlang", "tibble", "vctrs"))
install.packages(c("ape", "cli", "rlang", "tibble", "vctrs"))
install.packages(c("ape", "cli", "rlang", "tibble", "vctrs"))
devtools::install_github('mlcollyer/RRPP', ref= "develop")
install.packages('rlang')
install.packages("rlang")
devtools::install_github('mlcollyer/RRPP', ref= "develop")
devtools::install_github('mlcollyer/RRPP', ref= "develop")
devtools::install_github('mlcollyer/RRPP', ref= "develop", force = TRUE)
devtools::install_github('mlcollyer/RRPP', ref="develop", force = TRUE, build_vignettes = TRUE)
library(RRPP)
?lm.rrpp
library(geomorph)
?shapeHulls
?plot.gm.prcomp
RRPP:::plot.predict.lm.rrpp
?as.factor
x <- c("a","c","b")
as.factor(x)
as.factor(x, ordered = T)
as.factor(x, as.ordered = T)
factor(x, as.ordered = T)
factor(x, ordered = T)
factor(x)
RRPP:::plot.lm.rrpp
?RRPP:::plot.lm.rrpp
library(geomorph)
?integration.Vrel
integration.Vrel
compare.ZVrel
library(geomorhp)
library(geomorph)
?fixed.angle
library(kableExtra)
install.packages(c("aplot", "blob", "bookdown", "broom", "car", "caret", "cli", "commonmark", "conquer", "dbplyr", "dendextend", "deSolve", "dplyr", "dtplyr", "ellipse", "emmeans", "FactoMineR", "FNN", "future", "geiger", "ggplot2", "ggsci", "googledrive", "googlesheets4", "gstat", "hardhat", "hms", "htmltools", "htmlwidgets", "igraph", "interp", "intervals", "ipred", "lme4", "magick", "markdown", "Matrix", "metafor", "modelr", "multcompView", "mvMORPH", "openssl", "parallelly", "prodlim", "ps", "quantreg", "raster", "RcppArmadillo", "RCurl", "rgl", "rmarkdown", "RSQLite", "scatterplot3d", "segmented", "seqinr", "servr", "sf", "spacetime", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spelling", "stars", "terra", "testthat", "wk", "xfun", "XML"))
library(geomorph)
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
rmarkdown::metadata$output
library(kableExtra)
y <- x + rnorm()
x <- rnorm(30)
y <- x + rnorm()
y <- x + rnorm(30)
cor(x,y)
plot(x,y)
x <- x + c(rep(5,10),rep(-2,10),rep(0,10))
plot(x,y)
y <- y + c(rep(1,10),rep(-1,10),rep(0,10))
spec <- gl(3,10)
spec
anova(lm(y~x*spec))
plot(x,y)
x.r <- resid(lm(x~spec))
y.r <- resid(lm(y~spec))
x.r
plot(x.r,y.r)
anova(lm(y.r~x.r*spec))
anova(lm(y~x.r*spec))
anova(lm(y.r~x*spec))
anova(lm(y~x*spec))
anova(lm(y.r~x.r*spec))
tinytex::reinstall_tinytex(repository = "illinois")
setwd("C:/DeanData/manuscripts/Submitted/2022-PristurusAllometry/pristurus_allometry/2023_03_24_Revision1/Analyses")
setwd("C:/DeanData/manuscripts/Submitted/2022-PristurusAllometry/pristurus_allometry/Analyses")
# packages ----
libs <- c('geomorph', 'RRPP', 'phytools', 'geiger', 'tidyverse',
'ggphylomorpho')
easypackages::libraries(libs)
# 0: Data Prep ----
data0 <- read.table('data/morpho/morpho_pristurus.csv', sep = ';', dec = '.', header = TRUE, stringsAsFactors = TRUE)
sp.to.keep <- names(which(table(data0$species) >= 5))
data <- data0[data0$species %in% sp.to.keep, ]
data$species <- droplevels(data$species)
data$SVL <- log(data$SVL)
shape <- as.matrix(log(data[, 8:ncol(data)]))
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad, species = data$species)
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
sz.mn <- tapply(rdf$svl,rdf$species,mean)
hab.mn <- as.factor(by(rdf$habitat,rdf$species,unique))
levels(hab.mn) <- levels(rdf$habitat)
tree <- treedata(phy = tree0, data = LS.mns)$phy
C <- vcv.phylo(tree)
# Set title size for plots ----
title_sz <- 12
# Evolutionary allometry ----
allom.sp <- lm.rrpp(LS.mns~sz.mn, Cov = C)
allom.sp.plot <- plot(allom.sp, predictor = as.numeric(sz.mn),
type = 'regression', reg.type = 'RegScore', pch = 16)
gg_df_evol <- data.frame(pred = -allom.sp.plot$PredLine,
RegScore = allom.sp.plot$RegScore[,1],
SVL = sz.mn)
gg_evol <- ggplot(data = gg_df_evol, aes(x = SVL)) +
geom_point(aes(y = RegScore), color = 'transparent',
fill = 'gray60', size = 5, pch = 21, alpha = 0.7) +
geom_line(aes(y = pred), color = 'gray30', size = 0.8) +
labs(title = 'Evolutionary allometry', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz))
# Individual allometry ----
allom.ind <- lm.rrpp(shape~svl, data = rdf)
allom.ind.plot <- plot(allom.ind, predictor = rdf$svl,
type = 'regression', reg.type = 'RegScore', pch = 16)
gg_df_ind <- data.frame(pred = allom.ind.plot$PredLine,
RegScore = allom.ind.plot$RegScore[,1],
SVL = rdf$svl)
gg_ind <- ggplot(data = gg_df_ind, aes(x = SVL)) +
geom_point(aes(y = RegScore),
color = 'gray60', size = 1, pch = 16, alpha = 0.7) +
geom_line(aes(y = pred), color = 'black', size = 0.8) +
labs(title = 'Static allometry', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz))
# Evolutionary allometry -- Habitat ----
allom.sp.hab <- lm.rrpp(LS.mns~sz.mn*hab.mn, Cov = C)
allom.sp.hab.plot <- plot(allom.sp.hab, predictor = as.numeric(sz.mn),
type = 'regression', reg.type = 'RegScore', pch = 16)
gg_df_evol_hab <- data.frame(pred = -allom.sp.hab.plot$PredLine,
RegScore = allom.sp.hab.plot$RegScore[,1],
SVL = sz.mn,
habitat = hab.mn)
hab.colors <- c(ground = "#F1B670", rock = "#683B5E", tree = "#E93F7B")
gg_evol_hab <- ggplot(data = gg_df_evol_hab, aes(x = SVL)) +
geom_point(aes(y = RegScore, fill = habitat), color = 'transparent',
size = 5, pch = 21, alpha = 0.7) +
geom_line(aes(y = pred, color = habitat), size = 1) +
scale_fill_manual(values = hab.colors) +
scale_color_manual(values = hab.colors) +
labs(title = 'Evolutionary allometry per habitat', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz),
legend.position = 'none')
# Static allometry -- Habitat ----
allom.ind.hab <- lm.rrpp(shape~svl*habitat, data = rdf)
allom.ind.hab.plot <- plot(allom.ind.hab, predictor = rdf$svl,
type = 'regression', pch = 16,
col = hab.colors[as.numeric(rdf$habitat)])
gg_df_ind_hab <- data.frame(pred = allom.ind.hab.plot$PredLine,
RegScore = allom.ind.hab.plot$RegScore[,1],
SVL = rdf$svl,
habitat = rdf$habitat)
gg_ind_hab <- ggplot(data = gg_df_ind_hab, aes(x = SVL)) +
geom_point(aes(y = RegScore, color = habitat),
size = 1, pch = 16, alpha = 0.7) +
geom_line(aes(y = pred, color = habitat), size = 1) +
scale_color_manual(values = hab.colors) +
labs(title = 'Habitat-based static allometry', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz),
legend.position = 'none')
# Static allometry -- Species ----
allom.ind.sp <- lm.rrpp(shape~svl*species, data = rdf)
allom.ind.sp.plot <- plot(allom.ind.sp, predictor = rdf$svl,
type = 'regression', pch = 16,
col = hab.colors[as.numeric(rdf$habitat)])
gg_df_ind_sp <- data.frame(pred = allom.ind.sp.plot$PredLine,
RegScore = allom.ind.sp.plot$RegScore[,1],
SVL = rdf$svl,
species = rdf$species,
habitat = rdf$habitat)
gg_ind_sp <- ggplot(data = gg_df_ind_sp, aes(x = SVL)) +
geom_point(aes(y = RegScore, color = habitat),
size = 1, pch = 16, alpha = 0.7) +
geom_line(aes(y = pred, color = habitat, group = species),
size = 1) +
scale_color_manual(values = hab.colors) +
labs(title = 'Intraspecific static allometry',
subtitle = '(colored by habitat)', x = 'size', y = 'shape') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = title_sz),
plot.subtitle = element_text(hjust = 0.5, face = 'plain'),
legend.position = 'none')
