?density
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
plot(density(fit$ANOVA$Fs))
?ks
?ks.test
ks.test(fit$ANOVA$Fs,"F")
ks.test(fit$ANOVA$Fs,"pnorm")
anova(fit)
fit$ANOVA$\
fit$ANOVA$df
fit$ANOVA$df[1]
ks.test(fit$ANOVA$Fs,pf(fit$ANOVA$df[1],fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,pf(df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,df(df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
df(fit$ANOVA$Fs,3,50)
df(4999,3,50)
rf(4999,3,50)
hist(rf(4999,3,50))
density(rf(4999,3,50))
plot(density(rf(4999,3,50)))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
anova(fit)
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
plot(density(fit$ANOVA$Fs))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
library(geomorph)
data("Pupfish")
gp <- interaction(Pupfish$Pop,Pupfish$Sex)
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
anova(fit)
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
plot(density(fit$ANOVA$Fs))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
hist(fit$ANOVA$Fs, breaks = 80)
points(density(fit$ANOVA$Fs))
points(fit$ANOVA$Fs,density(fit$ANOVA$Fs))
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs))
hist(fit$ANOVA$Fs, breaks = 80)
lines(density(fit$ANOVA$Fs), col = 4, lwd = 2)
hist(fit$ANOVA$Fs, breaks = 80, ylim = c(0, max(fit$ANOVA$Fs)))
hist(fit$ANOVA$Fs, breaks = 80, xlim = c(0, max(fit$ANOVA$Fs)))
lines(density(fit$ANOVA$Fs), col = 4, lwd = 2)
X <- fit$ANOVA$Fs
X <- fit$ANOVA$Fs
hist(x, breaks = 80)
x <- fit$ANOVA$Fs
hist(x, breaks = 80)
seq(min(x), max(x), length = 40)
seq(min(x), max(x), length = 80)
lines(seq(min(x), max(x), length = 80),density(fit$ANOVA$Fs), col = 4, lwd = 2)
hist(x, breaks = 80)
lines(density(x), col = 4, lwd = 2)
plot(density(x))
hist(x, breaks = 80,freq = T)
hist(x, breaks = 80,freq = F)
lines(density(x), col = 4, lwd = 2)
lines(density(x), col = "red", lwd = 2)
levels(gp)
nlevels(gp)
Pupfish$CS
length(Pupfish$CS)
length(Pupfish$CS)-nlevels(gp)
df.theory <- df(density(Pupfish$CS, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
)
df.theory <- df(density(Pupfish$CS), nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
density(Pupfish$CS)$x
df.theory <- df(density(Pupfish$CS)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
df.theory
df.theory <- df(density(Pupfish$CS)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
obs <- density(Pupfish$CS)
df.theory <- df(density(Pupfish$CS)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
obs <- density(Pupfish$CS)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
points(df.ols.ols[[1]]$x,df.theory, col = "red", lwd = 2)
points(obs$x,df.theory, col = "red", lwd = 2)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
points(obs$x,df.theory, col = "red", lwd = 2)
lines(obs$x,df.theory, col = "red", lwd = 2)
obs
obs$x
df.theory
df.theory <- df(density(fit$ANOVA$Fs)$x, nlevels(gp)-1, length(Pupfish$CS)-nlevels(gp))
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
fit$ANOVA$df
df.theory <- df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2])
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
data("Pupfish")
gp <- interaction(Pupfish$Pop,Pupfish$Sex)
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
df.theory <- df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2])
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
library(geomorph)
data("Pupfish")
gp <- interaction(Pupfish$Pop,Pupfish$Sex)
iter=4999
fit <- lm.rrpp(Pupfish$CS~gp, iter = iter)
df.theory <- df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2])
obs <- density(fit$ANOVA$Fs)
hist(fit$ANOVA$Fs, breaks = 80,freq = F)
lines(obs$x,df.theory, col = "red", lwd = 2)
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x)
)
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x,df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
length(fit$ANOVA$Fs)
length(df(density(fit$ANOVA$Fs)$x)
)
#not working. Figure it out
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,df(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#I think this is correct
ks.test(fit$ANOVA$Fs,rf((iter+1),df1=fit$ANOVA$df[1],df2=fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
#not working. Figure it out
ks.test(fit$ANOVA$Fs,rf(density(fit$ANOVA$Fs)$x, fit$ANOVA$df[1], fit$ANOVA$df[2]))
?lm.rrpp
?RRPP::lm.rrpp
library(RRPP)
?lm.rrpp
devtools::install_githbub('mlcollyer/RRPP', ref="develop", build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP', ref="develop", build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP', build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP', build_vignettes = TRUE)
devtools::install_github('mlcollyer/RRPP')
install.packages(c("cli", "lifecycle"))
devtools::install_github('mlcollyer/RRPP', build_vignettes = TRUE)
library(nlme)
?gls
x = rnorm(100, mean = 10, sd = 2)
y = rnorm(100, mean = 20, sd = 2)
bimodal =c(x,y)
shapiro.test(bimodal)
hist(bimodal)
Transformation with Box-Cox
library(geoR)
lambda=boxcoxfit(bimodal)$lambda
bin.tr.bc=((bimodal^lambda)-1)/(lambda)
shapiro.test(bin.tr.bc)
install.packages("geoR")
library(geoR)
lambda=boxcoxfit(bimodal)$lambda
bin.tr.bc=((bimodal^lambda)-1)/(lambda)
shapiro.test(bin.tr.bc)
hist(bin.tr.bc)
Log
shapiro.test(log(bimodal))
hist(log(bimodal))
Square root
shapiro.test(sqrt(bimodal))
hist(sqrt(bimodal))
shapiro.test((log(bimodal))^2)
hist((log(bimodal))^2)
log exponent 1.5
shapiro.test((log(bimodal))^1.5)
hist((log(bimodal))^1.5)
shapiro.test((bimodal)^(1/3))
hist((bimodal)^(1/3))
shapiro.test(asin((bimodal/max(bimodal))^(1/2)))
hist(asin((bimodal/max(bimodal))^(1/2)))
transformed <- abs(binomial - mean(binomial))
transformed <- abs(bimodal - mean(bimodal))
shapiro.test(transformed)
hist(transformed)
data:  transformed
setwd("C:/DeanData/manuscripts/Submitted/2022-PristurusAllometry/pristurus_allometry/Analyses")
libs <- c('RRPP', 'phytools', 'geiger', 'tidyverse')
easypackages::libraries(libs)
data0 <- read.table('data/morpho/morpho_pristurus.csv', sep = ';', dec = '.', header = TRUE)
sp.to.keep <- names(which(table(data0$species) >= 5))
data <- data0[data0$species %in% sp.to.keep, ]
data$species <- as.factor(data$species)
data$habitat_broad <- as.factor(data$habitat_broad)
data$SVL <- log(data$SVL)
shape <- as.matrix(log(data[, 8:ncol(data)]))
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad,
species = data$species)
# Comparison of multivariate allometry among habitat types
fit.hab <- lm.rrpp(shape~svl*habitat, data = rdf)
anova(fit.hab)
pw.hab <- pairwise(fit.hab, groups = rdf$habitat, covariate = rdf$svl)
summary(pw.hab, type = 'VC', stat.table = FALSE)
#Slopes by habitat
fit.coef <- fit.hab$LM$coefficients
ind.coef <- rbind(fit.coef[2,], fit.coef[2,]+fit.coef[5,], fit.coef[2,]+fit.coef[6,])
rownames(ind.coef) <- c("Ground","Rock", "Tree")
# Analysis using species means
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
sz.mn <- tapply(rdf$svl,rdf$species,mean)
interaction(rdf$species,rdf$habitat)
levels(interaction(rdf$species,rdf$habitat))
intersect(rdf$species,rdf$habitat)
unique(rdf$habitat,rdf$species)
?collapse
collapse(rdf$habitat,rdf$species)
collapse(rdf$habitat)
hab.mn <- rdf$habitat[which(rdf$habitat%in%rdf$species == "TRUE"),]
hab.mn <- rdf$habitat[which(rdf$habitat%in%rdf$species == "TRUE")]
hab.mn
which(rdf$habitat%in%rdf$species == "TRUE")
rdf$habitat%in%rdf$species
intersect
?intersect
by(rdf$svl,function(x) rdf$habitat[x])
by(rdf$svl,unique(rdf$habitat))
unique(rdf$habitat)
?unique
by(rdf$species,rdf$habitat,unique)
by(rdf$habitat,rdf$species,unique)
by(levels(rdf$habitat),rdf$species,unique)
hab.mn <- as.factor(by(rdf$habitat,rdf$species,unique))
hab.mn
levels(rdf$habitat)
rdf
View(data)
levels(rdf$habitat)
hab.mn
levels(rdf$habitat)
levels(hab.mn) <- levels(rdf$habitat)
hab.mn
names(hab.mn)
names(sz.mn)
rdf.sp <- rrpp.data.frame(svl = sz.mn, shape = LS.mns, habitat = hab.mn)
fit.sp <- lm.rrpp(shape~svl*habitat,data = rdf.sp)
rdf.sp
lm.rrpp(LS.mns~sz.mn)
lm.rrpp(LS.mns~sz.mn*hab.mn)
rdf.sp <- rrpp.data.frame(sz.mn = sz.mn, LS.mns = LS.mns, hab.mn = hab.mn)
rdf.sp <- rrpp.data.frame(sz.mn = sz.mn, LS.mns = LS.mns, hab.mn = hab.mn)
fit.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn, data = rdf.sp)
# get species habitats
# Drop species with less than 5 individuals from the tree
data.sp <- data.sp %>%
filter(species %in% sp.to.keep)
rdf.sp <- rrpp.data.frame(sz.mn = sz.mn, LS.mns = LS.mns, hab.mn = hab.mn)
fit.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn, data = rdf.sp)
fit.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn)
anova(fit.sp)
pairwise(fit.sp,groups = hab.mn, covariate = sz.mn)
pw.hab.sp <- pairwise(fit.sp,groups = hab.mn, covariate = sz.mn)
summary(pw.hab.sp, type = 'VC', stat.table = FALSE)
fit.coef.sp <- fit.hab.sp$LM$coefficients
fit.hab.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn)
anova(fit.hab.sp)
pw.hab.sp <- pairwise(fit.hab.sp,groups = hab.mn, covariate = sz.mn)
summary(pw.hab.sp, type = 'VC', stat.table = FALSE)
fit.coef.sp <- fit.hab.sp$LM$coefficients
sp.coef <- rbind(fit.coef.sp[2,], fit.coef.sp[2,]+fit.coef.sp[5,], fit.coef.sp[2,]+fit.coef.sp[6,])
rownames(sp.coef) <- c("Ground","Rock", "Tree")
ind.coef
sp.coef
plot(fit.hab.sp, type = "regression")
plot(fit.hab.sp, type = "regression",predictor = sz.mn)
tree0 <- read.nexus('Analyses/data/phylogeny/pristurus_tree_final.nex')
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
treedata(phy = tree0, data = LS.mns)
tree <- treedata(phy = tree0, data = LS.mns)$phy
plot(tree)
C <- vcv.phylo(tree)
fit.hab.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn, Cov = C)
anova(fit.hab.sp)
fit.hab.sp <- lm.rrpp(LS.mns~sz.mn*hab.mn)
anova(fit.hab.sp)
### NOTE: when accounting for phylogeny, evol. allometry still present, but not the habitat effect
fit.hab.sp.phy <- lm.rrpp(LS.mns~sz.mn*hab.mn, Cov = C)
anova(fit.hab.sp.phy)
setwd("C:/DeanData/manuscripts/Submitted/2022-PristurusAllometry/pristurus_allometry/Analyses")
libs <- c('RRPP', 'phytools', 'geiger', 'tidyverse')
easypackages::libraries(libs)
data0 <- read.table('data/morpho/morpho_pristurus.csv', sep = ';', dec = '.', header = TRUE)
sp.to.keep <- names(which(table(data0$species) >= 5))
data <- data0[data0$species %in% sp.to.keep, ]
data$species <- as.factor(data$species)
data$habitat_broad <- as.factor(data$habitat_broad)
data$SVL <- log(data$SVL)
shape <- as.matrix(log(data[, 8:ncol(data)]))
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad)
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
# 1: Evolutionary Allometry
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad)
rdf <- rrpp.data.frame(svl = data$SVL, shape = shape, habitat = data$habitat_broad, species = data$species)
tree0 <- read.nexus('data/phylogeny/pristurus_tree_final.nex')
LS.mns <- pairwise(lm.rrpp(shape~species, data = rdf, iter=0), groups = rdf$species)$LS.means[[1]]
sz.mn <- tapply(rdf$svl,rdf$species,mean)
LS.mns
sz.mn
hab.mn <- as.factor(by(rdf$habitat,rdf$species,unique))
levels(hab.mn) <- levels(rdf$habitat)
tree <- treedata(phy = tree0, data = LS.mns)$phy
C <- vcv.phylo(tree)
# 1: Evolutionary Allometry
allom.sp <- lm.rrpp(LS.mns~sz.mn, Cov = C)
anova(allom.sp)
allom.ind <- lm.rrpp(shape~size, data = rdf)
allom.ind <- lm.rrpp(shape~svl, data = rdf)
anova(allom.sp)
anova(allom.ind)
coef.sp <- allom.sp$LM$gls.coefficients
coef.sp
coef.sp <- allom.sp$LM$gls.coefficients[2,]
coef.sp
coef.ind <- allom.ind$LM$coefficients[2,]
coef.ind
RRPP:::summary.pairwise
RRPP:::pairwise
RRPP:::vec.cor.matrix
crossprod(coef.sp,coef.ind)
coef.sp%*%t(coef.ind)
t(coef.sp)%*%(coef.ind)
coef.sp^2
sum(coef.sp^2)
crossprod(coef.sp,coef.ind) / (sum(coef.sp^2) + sum(coef.ind^2))
acos(crossprod(coef.sp,coef.ind) / (sum(coef.sp^2) + sum(coef.ind^2)))
RRPP:::summary.pairwise
RRPP:::vec.cor.matrix
180/pi*acos(crossprod(coef.sp,coef.ind) / (sum(coef.sp^2) + sum(coef.ind^2)))
M <-rbind(coef.sp <- allom.sp$LM$gls.coefficients[2,],
coef.ind <- allom.ind$LM$coefficients[2,])
RRPP:::vec.cor.matrix(M)
cor(M)
M
cor(t(M))
RRPP:::pairwise
RRPP:::summary.pairwise
RRPP:::vec.cor.matrix(M)
RRPP:::vec.cor.matrix(M)*180/pi
RRPP:::r.summary.from.list
acos(RRPP:::vec.cor.matrix(M))
acos(RRPP:::vec.cor.matrix(M))*180/pi
# 2: Comparison of multivariate allometry among habitat types
fit.hab <- lm.rrpp(shape~svl*habitat, data = rdf)
anova(fit.hab)
pw.hab <- pairwise(fit.hab, groups = rdf$habitat, covariate = rdf$svl)
summary(pw.hab, type = 'VC', stat.table = FALSE)
#Slopes by habitat
fit.coef <- fit.hab$LM$coefficients
ind.coef <- rbind(fit.coef[2,], fit.coef[2,]+fit.coef[5,], fit.coef[2,]+fit.coef[6,])
rownames(ind.coef) <- c("Ground","Rock", "Tree")
ind.coef
svl
shape
pls.head <- two.b.pls(shape[, c(2:4)], rdf$svl)
libs <- c('geomorph', 'RRPP', 'phytools', 'geiger', 'tidyverse')
easypackages::libraries(libs)
pls.head <- two.b.pls(shape[, c(2:4)], rdf$svl)
pls.limb <- two.b.pls(shape[, 5:8], rdf$svl)
# Get scores
limb.scores <- pls.limb$XScores[, 1]
head.scores <- pls.head$XScores[, 1]
plot(svl, pls.limb$XScores[, 1], pch = 22, bg = hab.colors[habitat.fctr])
plot(rdf$svl, pls.limb$XScores[, 1], pch = 22, bg = hab.colors[habitat.fctr])
plot(rdf$svl, pls.limb$XScores[, 1], pch = 22, bg = rdf$habitat)
plot(rdf$svl, pls.head$XScores[, 1], pch = 25,
bg = rdf$habitat)
# 3: Map allometry slopes on phylogeny
head.scores <- two.b.pls(shape[, c(2:4)], rdf$svl)$XScores[, 1]
limb.scores <- two.b.pls(shape[, 5:8], rdf$svl)$XScores[, 1]
fit.head.sp <- lm.rrpp(head.scores ~ rdf$svl*rdf$species)
fit.limb.sp <- lm.rrpp(limb.scores ~ rdf$svl*rdf$species)
anova(fit.head.sp)
anova(fit.limb.sp)
plot(fit.head.sp, predictor = rdf$svl, type = 'regression', pch = 16,
col = rdf$species)
fit.head.sp$LM$coefficients
coef.head <- lm.rrpp(head.scores ~ rdf$svl*rdf$species)$LM$coefficients
coef.limb <- lm.rrpp(limb.scores ~ rdf$svl*rdf$species)$LM$coefficients
# get per-species slopes
head.slp <- coef.head[grep('rdf$svl', rownames(coef.head)), ]
head.slp
coef.head
# get per-species slopes
head.slp <- coef.head[grep('svl', rownames(coef.head)), ]
head.slp
head.slp[-1] <- head.slp[-1] + head.slp[1]
head.slp
gsub('svl:species.fctr', '', names(head.slp))
names(head.slp) <- gsub('rdf$svl:rdf$species', '', names(head.slp))
head.slp
# get per-species slopes
head.slp <- coef.head[grep('svl', rownames(coef.head)), ]
head.slp[-1] <- head.slp[-1] + head.slp[1]
names(head.slp
)
gsub('svl:rdf$species', '', names(head.slp))
# get per-species slopes
head.slp <- coef.head[grep('svl', rownames(coef.head)), ]
head.slp[-1] <- head.slp[-1] + head.slp[1]
head.slp
names(head.slp) <- gsub('rdf$svl:rdf$species', '', names(head.slp))
names(head.slp) <- gsub('rdf$svl', 'Pristurus_abdelkuri', names(head.slp))
head.slp
levels(rdf$species)
##NOT WORKING
names(head.slp) <- levels(rdf$species)
head.slp
# get per-species slopes
head.slp <- coef.head[grep('svl', rownames(coef.head)), ]
head.slp[-1] <- head.slp[-1] + head.slp[1]
limb.slp <- coef.limb[grep('svl', rownames(coef.limb)), ]
limb.slp[-1] <- limb.slp[-1] + limb.slp[1]
names(limb.slp) <- names(head.slp) <- levels(rdf$species)
limbs.slp
head.slp
coef.limb
limb.slp <- coef.limb[grep('svl', rownames(coef.limb)), ]
limb.slp
limb.slp[-1] <- limb.slp[-1] + limb.slp[1]
limb.slp
names(limb.slp) <- names(head.slp) <- levels(rdf$species)
head.slp
limb.slp
contMap(tree = tree, x = head.slp, outline = FALSE)
cm.limb <- contMap(tree = tree, x = limb.slp, outline = FALSE)
allom.sp
# 4: phylomorphospace of size-standardized data (residuals)
# Prepare data
shape.res <- residuals(allom.sp)
pca.shape.ols <- gm.prcomp(shape.res, phy = tree)
plot(pca.shape.ols)
pca.w.phylo <- gm.prcomp(shape.res, phy = tree)
pca.w.phylo <- gm.prcomp(shape.res, phy = tree)
plot(pca.w.phylo)
plot(pca.w.phylo, phylo = TRUE, pch = 21)
?gm.prcomp
plot(pca.w.phylo, phylo = TRUE, pch = 21, phylo.par = list(node.labels = FALSE))
plot(pca.w.phylo, phylo = TRUE, pch = 21, bg = black, phylo.par = list(node.labels = FALSE))
plot(pca.w.phylo, phylo = TRUE, pch = 21, bg = 'black', phylo.par = list(node.labels = FALSE))
